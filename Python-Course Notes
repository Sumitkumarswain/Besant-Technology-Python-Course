--Python is a high-level, easy-to-read, general-purpose programming language. It's popular for:

1. Web development

2. Data analysis

3. Machine learning

4. Automation

5. App development

6. Scripting

--Itâ€™s known for its clean syntax and readability, which makes it a great choice for beginners.

-- Key Features of Python
1. Simple & Easy to Learn
2. Open Source
3. Cross-platform
4. Extensive Libraries (NumPy, Pandas, etc.)
5. Used by Big Companies (Google, Netflix, Instagram)


-- Variables 
-- Variables are containers used to label and store values for future reference.
1. example - Price = 5
          print(price+1)
output -   6

-- Datatypes - 1. Numeric Datatypes
                a. Integer
                b. Float
                c. Complex
              2. Sequence Datatypes
                a. String
                b. List
                c. Tuple
                d. Range
              3. Set Datatypes  
              4. Mapping Datatype
              5. Boolean Datatypes

-- List datatypes are write in [] this.
-- Tuple Datatypes are write in () this.

example -1. Fruits = ['apple', 'banana', 'grapes']
                    type(Fruits)
                    output - list
-- But if someone try to change it he can easily -
            Fruits = ['apple', 'banana', 'pineapple']
-- the previous data removed and overwrite by the new one.

2.  Fruits("apple", "banana")
it is a tuple datatype so it can't be changed after assining.

--- How to change the datatypes in python.
> If a = 1.56
    it is a float datatype
So if i want to change the datatype float to integer
> int(a)
output - 1
And now this is a Integer datatype.

-- Upper case - 
a = [""]
Fruit = "Apple"
>Fruit.upper()
>output - APPLE

--- lower case
          Fruit.lower()
          output - apple

--- capitalize -
          Fruit.capitalize()
          output - Apple

--- title()
          Fruit.title()
          output - Apple
But in a sentense

          sen = "hello python world."
          sen.capitalize()
          output - Hello python world.

          sen.title()
          output - Hello Python World.
          Here capitalize() used for only first word's first letter capital.
          And title() used for only every words in a sentense gets capital.

--- swapcase()
          it swap or change all the capital leteer to small and small letter to capital.
          example - a = "Python Course"
          a.swapcase()
          output - "pYTHON cOURSE"


--- Suppose a = "Python Course"
                    a.isalpha()
                    output - false (Because it is a string data not alphabatic, isalpha check it is alphabatic or not and in that way it gives true or false)

--- if we write a = "Python"
                    a.isalpha() 
                    output - True

---- Suppose a = "Course"
           a.isnumeric()
          output - False (because isnumeric checks the data is numeric or not according to that it gives true or false)

--- if we write a = 56
          a.isnumeric()
          output - True

--- Startwith()
          it give true or false in output after checking the first starting letter of a sentense or word.
          example - a = "Python Course"
          a.startswith("P")
          output - True

--- endswith()
          it gives as well as the previous one but th twist is it checks the last letter.
          a.endswith("e")
          output - True

---- split()
          it removes that value or letter then it gives the output by divide that.
          example -
          a = "Python-Course"
          a.split("-")
          output - "Python", "Course"

example - a = "Data Analytics"
          a.split("a")
          output - "D", "t", "An", "lytics"

--- append-
          it inserts new data inside a list at the end.
          Vegetables = ["Potato", "Carrot"]
          Vegetables.append("Beans")
          print(Vegetables)
          output - ["Potato", "Carrot", "Beans"]

----- Arithmatic Operators -    1. Addition (+)
                                2. Substraction (-)
                                3. Multiplication (*)
                                4. Divison (/)
                                5. Floor Division (//)
          Floor division - It divides one value by another, then give the divisor value by rounds down to the nearest integer.
                                6. Exponentiation (**)
          Exponentiation - It raise one value to the power of another.
          if 2 ** 5 = 2 is base value and 5 is power means 
                                7. Modulus (%) 
          Modulus - It gives the reminder of a division.
          a = 26
          b = 3
          modulus = a%b
          print(modulus)
          output - 2

# 1. Indexing
          Indexing allows you to access a specific element in a sequence using its position.
          
          Types of Indexing
          Positive Indexing (Starts from 0)
          
          Negative Indexing (Starts from -1, counting from the right)

---example 1. 
a = [2,3,4,8,5,7,2,6]
print(a.index(4))
output - 2

Here how it works - [2,3,4,8,5,7,2,6] :- the index count is like-
[2, 3, 4, 8, 5, 7, 2, 6]
 0  1  2  3  4  5  6  7
so we find the index for 4 so it gives output 2.

in string:
a = "Iam a student"
print(a.index(5))
output - 'a'

---- Slicing
Slicing in Python is a technique used to extract a portion of a sequence (like a list, tuple, string, etc.) using a specific syntax.
Slicing syntax - sequence[start:stop:step]
-- start: index where the slice starts (inclusive)

-- stop: index where the slice ends (exclusive)

-- step: how many steps to take (default is 1)

example 1 - Fruit = ["apple", "banana", "grapes", "mango", "watermelon", "Guava"]
                    Fruit[2:5:1]
                    output - ['grapes', 'mango', 'watermelon']
example 2 - Fruit[2:5:]
          by default step is 1 so the output become
          ['grape','mango','watermelon']
example 3 - Fruit[1::]
          it gives output start from 1 and stops at last and taskes each one.
          output - ['banana', 'grapes','mango','watermelon','guava']
example 4 - Fruit[1:-1:1]
          output take from 1 and stops at last end and exclude it then rest are our output.
          ['banana','grapes','mango','watermelon']
--- if we add different data types in a list then how we extract by slicing.
example 5 - mixed_list - [1, 1.25, "Character", "Hello Python World"]
                          0    1        2                   3
mixed_list[1:3:1]
output - [1.25, "character"]

another example - mixed = [1.23, 12, ["character", "kite"], [12, 33, 55.25]]
so now -  0    1               2                  3    
But in 2 & 3 -          0          1       0    1    2 

so now in slicing if you want in output - "character", 33,55.25
                    ------print((mixed[2][0:1:])+(mixed[3][1:3:]))

----- Dictionary Data types
dict1 = {
    "John":"Cricket",
    "Kabir":"Tennis",
    "Linu":"Football"
}

dict1["John"]
output - 'cricket'
